/**
* Copyright (c) Microblink Ltd.
*
* BSD 3-Clause revised license:
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#include "fix_version"

// No support for entirely conceptless STLs
#include <concepts>

// https://en.cppreference.com/w/cpp/feature_test

#if __cpp_lib_concepts >= 202002L
// we have a full C++20 concepts implementation
#else

#include <type_traits>
//------------------------------------------------------------------------------
namespace std
{
//------------------------------------------------------------------------------

/// \note libc++ 11 and 12 (and Android NDK r25b) have std::same_as implemented
/// in their concepts header and we expect this as a minimum.
///                                         (16.08.2022. Nenad Miksa)

template<class _From, class _To>
concept convertible_to =
  is_convertible_v<_From, _To> &&
  requires {
    static_cast<_To>(declval<_From>());
  };
#define STDFIX_CONCEPT_convertible_to 202002L

template<class _Dp, class _Bp>
concept derived_from =
  is_base_of_v<_Bp, _Dp> &&
  is_convertible_v<const volatile _Dp*, const volatile _Bp*>;
#define STDFIX_CONCEPT_derived_from 202002L

template<class _Tp>
concept destructible = is_nothrow_destructible_v<_Tp>;
#define STDFIX_CONCEPT_destructible 202002L

template<class _Tp, class... _Args>
concept constructible_from =
    destructible<_Tp> && is_constructible_v<_Tp, _Args...>;
#define STDFIX_CONCEPT_constructible_from 202002L

template<class _Tp>
concept integral = is_integral_v<_Tp>;
#define STDFIX_CONCEPT_integral 202002L

template<class _Tp>
concept floating_point = is_floating_point_v<_Tp>;
#define STDFIX_CONCEPT_floating_point 202002L

#ifdef __ANDROID__
// not a real concept, just to make everything compile
// for real concept, please see https://en.cppreference.com/w/cpp/iterator/contiguous_iterator
template< typename T >
concept contiguous_iterator = requires ( T arg )
{
    *arg;
    &*arg;
    ++arg;
    arg++;
    --arg;
    arg--;
    arg += 9;
    arg -= 9;
};

// not a real concept, just to make everything compile
// for real concept, please see https://en.cppreference.com/w/cpp/iterator/contiguous_iterator
template< typename T >
concept input_iterator = requires ( T arg )
{
    *arg;
    ++arg;
    arg++;
};

template< typename T >
concept random_access_iterator = requires ( T arg )
{
    *arg;
    ++arg;
    arg++;
    --arg;
    arg--;
    arg += 9;
    arg -= 9;
    arg[ 9 ];
};
#endif
//------------------------------------------------------------------------------
} // namespace std
//------------------------------------------------------------------------------

#endif // deficient concepts
